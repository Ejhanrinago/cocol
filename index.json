{"repository_name":"github.com/cocol-project/cocol","body":"# COCOL!\n\n![Stability Experimental](https://img.shields.io/badge/Stability-Experimental-orange.svg?style=flat-square) ![Crystal 0.27.2](https://img.shields.io/badge/Crystal-0.27.2-blue.svg?style=flat-square&link=https://crystal-lang.org&link=https://crystal-lang.org/api/0.27.2/) ![License MPL-2.0](https://img.shields.io/badge/License-MPL--2.0-green.svg?style=flat-square) [![Build Status](https://travis-ci.org/cocol-project/cocol.svg?branch=master)](https://travis-ci.org/cocol-project/cocol)\n\n---\n\n  ![https://github.com/cocol-project/cocol/blob/master/img/demo2.gif](https://github.com/cocol-project/cocol/blob/master/img/demo2.gif)\n\n---\n\n## About üåê\nThe Cocol Project has the goal to lower the entry barrier for developers interested in building blockchains and dApps.\nThere is still a long way to go and your help is needed.\n\n## Installation üèπ\nCocol is written in [Crystal](https://crystal-lang.org/), so make sure to follow the [installation instructions](https://crystal-lang.org/reference/installation/) first.\n\nAfter setting up Crystal you can clone the Cocol repository and install the dependencies:\n```shell\n> git clone https://github.com/cocol-project/cocol.git\n> cd cocol\n> shards install\n```\n\n## Usage ‚öî\nMake your changes to the code-base and than build Cocol\n```shell\n> make\n```\nThe binary `./cocol` offers the following CLI options\n\n```text\nOptions:\n\n-p --port            The port your Cocol node is going to run on\n-m --master          Making this node a master (there can only be one)\n--max-connections    Setting the max-connections for peers.\n--miner              Making this node a miner\n--update             Triggering an update on launch (will catch up with the current height)\n\n```\n\nThere is also a script that starts multiple nodes and the master for you\n\n```shell\n> ./script/start.sh 66 5\n```\nFirst option is the amount of nodes and the second amount of miner.\nIt will start the master node with the port `3000` and every other node with\n`3000 + n`, while all miner have port `4000 + n`\n\n\nNow go ahead and open the explorer in a browser:\n```shell\n> open ./explorer/index.html\n```\n\nYou should see 66 nodes and a miner (red border)\n\nEach one of the nodes has a REST API on the corresponding port (e.g. `3001`)\n\nStart creating live fake transactions and watch the network come alive\n```shell\n> crystal script/live.cr\n\n```\n\n## Development üë©‚Äçüíªüë®‚Äçüíª\n\nCocol is in a very early stage. **Expect changes, bugs and messy code.**\nTest coverage sucks atm.\n\n## Contributing Ô∏èüë∑‚Äç‚ôÄÔ∏èüë∑‚Äç‚ôÇ\n\n1. Fork it ( https://github.com/cocol-project/cocol/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- github: [cserb](https://github.com/cserb) | twitter: [@cerbivore](http://twitter.com/cerbivore) | Cristian »òerb - creator, maintainer\n","program":{"html_id":"github.com/cocol-project/cocol/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/cocol-project/cocol","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/CLI","path":"CLI.html","kind":"module","full_name":"CLI","name":"CLI","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/cli/argument.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/cli/argument.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/CLI/Argument","path":"CLI/Argument.html","kind":"class","full_name":"CLI::Argument","name":"Argument","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Optarg/Model","kind":"class","full_name":"Optarg::Model","name":"Model"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Optarg/Model","kind":"class","full_name":"Optarg::Model","name":"Model"},{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/cli/argument.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/cli/argument.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/CLI","kind":"module","full_name":"CLI","name":"CLI"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns the COMMAND argument value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the COMMAND argument value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringArgument::Typed::Type][\"command\"]"}},{"id":"command?-instance-method","html_id":"command?-instance-method","name":"command?","doc":"Returns the COMMAND argument value.\n\nReturns nil, if the value is undefined.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the COMMAND argument value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringArgument::Typed::Type][\"command\"]?"}},{"id":"m?-instance-method","html_id":"m?-instance-method","name":"m?","doc":"Returns the -m option value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the -m option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"m?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!self[::Optarg::Definitions::BoolOption::Typed::Type][\"-m\"]?)"}},{"id":"master?-instance-method","html_id":"master?-instance-method","name":"master?","doc":"Returns the -m option value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the -m option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"master?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!self[::Optarg::Definitions::BoolOption::Typed::Type][\"-m\"]?)"}},{"id":"max_connections-instance-method","html_id":"max_connections-instance-method","name":"max_connections","doc":"Returns the --max-connections option value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the --max-connections option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"max_connections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringOption::Typed::Type][\"--max-connections\"]"}},{"id":"max_connections?-instance-method","html_id":"max_connections?-instance-method","name":"max_connections?","doc":"Returns the --max-connections option value.\n\nReturns nil, if the value is undefined.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the --max-connections option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"max_connections?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringOption::Typed::Type][\"--max-connections\"]?"}},{"id":"miner?-instance-method","html_id":"miner?-instance-method","name":"miner?","doc":"Returns the --miner option value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the --miner option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"miner?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!self[::Optarg::Definitions::BoolOption::Typed::Type][\"--miner\"]?)"}},{"id":"p-instance-method","html_id":"p-instance-method","name":"p","doc":"Returns the -p option value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the -p option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"p","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringOption::Typed::Type][\"-p\"]"}},{"id":"p?-instance-method","html_id":"p?-instance-method","name":"p?","doc":"Returns the -p option value.\n\nReturns nil, if the value is undefined.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the -p option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"p?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringOption::Typed::Type][\"-p\"]?"}},{"id":"port-instance-method","html_id":"port-instance-method","name":"port","doc":"Returns the -p option value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the -p option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringOption::Typed::Type][\"-p\"]"}},{"id":"port?-instance-method","html_id":"port?-instance-method","name":"port?","doc":"Returns the -p option value.\n\nReturns nil, if the value is undefined.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the -p option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"port?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[::Optarg::Definitions::StringOption::Typed::Type][\"-p\"]?"}},{"id":"update?-instance-method","html_id":"update?-instance-method","name":"update?","doc":"Returns the --update option value.\n\nThis method is automatically defined by the optarg library.","summary":"<p>Returns the --update option value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"update?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!self[::Optarg::Definitions::BoolOption::Typed::Type][\"--update\"]?)"}}],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/CLI/Argument/Parser","path":"CLI/Argument/Parser.html","kind":"class","full_name":"CLI::Argument::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Optarg/Parser","kind":"class","full_name":"Optarg::Parser","name":"Parser"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Optarg/Parser","kind":"class","full_name":"Optarg::Parser","name":"Parser"},{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/cli/argument.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/cli/argument.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/CLI/Argument","kind":"class","full_name":"CLI::Argument","name":"Argument"},"doc":"The dedicated Optarg::Parser subclass for the `Argument` class.\n\nThis class is automatically defined by the optarg library.","summary":"<p>The dedicated Optarg::Parser subclass for the <code><a href=\"../../CLI/Argument.html\">Argument</a></code> class.</p>","class_methods":[{"id":"after_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"after_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"after_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"after_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__after(proc, name)"}},{"id":"after_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"after_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"after_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"after_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__after(proc, nil)"}},{"id":"after_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-class-method","html_id":"after_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-class-method","name":"after_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"after_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__after(proc, name)\n"}},{"id":"around_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"around_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"around_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"around_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__around(proc, name)"}},{"id":"around_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"around_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"around_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"around_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__around(proc, nil)"}},{"id":"around_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-class-method","html_id":"around_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-class-method","name":"around_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"around_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__around(proc, name)\n"}},{"id":"before_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"before_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"before_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"before_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__before(proc, name)"}},{"id":"before_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"before_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"before_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"before_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__before(proc, nil)"}},{"id":"before_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-class-method","html_id":"before_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-class-method","name":"before_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"before_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__before(proc, name)\n"}},{"id":"on_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"on_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"on_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"on_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__on(proc, name)"}},{"id":"on_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","html_id":"on_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-class-method","name":"on_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"on_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__on(proc, nil)"}},{"id":"on_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-class-method","html_id":"on_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-class-method","name":"on_validate","doc":"Registers a callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"on_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__on(proc, name)\n"}}],"constructors":[],"instance_methods":[{"id":"after_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"after_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"after_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"after_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__after(proc, name)"}},{"id":"after_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"after_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"after_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"after_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__after(proc, nil)"}},{"id":"after_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-instance-method","html_id":"after_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-instance-method","name":"after_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"after_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__after(proc, name)\n"}},{"id":"around_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"around_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"around_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"around_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__around(proc, name)"}},{"id":"around_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"around_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"around_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"around_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__around(proc, nil)"}},{"id":"around_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-instance-method","html_id":"around_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-instance-method","name":"around_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"around_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__around(proc, name)\n"}},{"id":"before_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"before_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"before_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"before_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__before(proc, name)"}},{"id":"before_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"before_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"before_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"before_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__before(proc, nil)"}},{"id":"before_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-instance-method","html_id":"before_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-instance-method","name":"before_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"before_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__before(proc, name)\n"}},{"id":"callback_results_for_validate-instance-method","html_id":"callback_results_for_validate-instance-method","name":"callback_results_for_validate","doc":"Returns callback results of the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Returns callback results of the validate group.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"callback_results_for_validate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@callback_results[\"validate\"]? || (@callback_results[\"validate\"] = ::Callback::ResultSet(::Nil).new)).as(::Callback::ResultSet(::Nil))"}},{"id":"data:CLI::Argument-instance-method","html_id":"data:CLI::Argument-instance-method","name":"data","doc":"Returns a target model instance.","summary":"<p>Returns a target model instance.</p>","abstract":false,"args":[],"args_string":" : CLI::Argument","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/cli/argument.cr#L3","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::CLI::Argument","visibility":"Public","body":"@data.as(::CLI::Argument)"}},{"id":"on_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"on_validate(name,proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"on_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(name, proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"on_validate","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__on(proc, name)"}},{"id":"on_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","html_id":"on_validate(proc:::Proc(CLI::Argument::Parser,CLI::Argument,Nil))-instance-method","name":"on_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"args_string":"(proc : ::Proc(CLI::Argument::Parser, CLI::Argument, Nil))","source_link":null,"def":{"name":"on_validate","args":[{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"::Proc(::CLI::Argument::Parser, ::CLI::Argument, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append_callback_for_validate__on(proc, nil)"}},{"id":"on_validate(name=nil,&block:CLI::Argument::Parser,CLI::Argument->Nil)-instance-method","html_id":"on_validate(name=nil,&amp;block:CLI::Argument::Parser,CLI::Argument-&gt;Nil)-instance-method","name":"on_validate","doc":"Registers a dynamic callback for the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Registers a dynamic callback for the validate group.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : CLI::Argument::Parser, CLI::Argument -> Nil)","source_link":null,"def":{"name":"on_validate","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::CLI::Argument::Parser, ::CLI::Argument -> ::Nil)"},"return_type":"","visibility":"Public","body":"proc = ->(_1 : ::CLI::Argument::Parser, _2 : ::CLI::Argument) do\n  block.call(_1, _2)\nend\nappend_callback_for_validate__on(proc, name)\n"}},{"id":"run_callbacks_for_validate(*args,&)-instance-method","html_id":"run_callbacks_for_validate(*args,&amp;)-instance-method","name":"run_callbacks_for_validate","doc":"Invokes all callbacks of the validate group.\n\nThis method is automatically defined by the Crystal Callback library.","summary":"<p>Invokes all callbacks of the validate group.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, &)","source_link":null,"def":{"name":"run_callbacks_for_validate","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"results = renew_callback_results_for_validate\nrun_callbacks_for_validate__before(results, self, *args)\nrun_callbacks_for_validate__around(results, self, *args)\nrun_callbacks_for_validate__on(results, self, *args)\nresult = yield results\nrun_callbacks_for_validate__around(results, self, *args)\nrun_callbacks_for_validate__after(results, self, *args)\nresult\n"}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/cocol-project/cocol/Cocol","path":"Cocol.html","kind":"module","full_name":"Cocol","name":"Cocol","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/logger.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/logger.cr"},{"filename":"cocol/version.cr","line_number":1,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/version.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Cocol","kind":"module","full_name":"Cocol","name":"Cocol"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"logger-instance-method","html_id":"logger-instance-method","name":"logger","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/logger.cr#L6","def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger || (@@logger = Logger.new(STDOUT, level: Logger::INFO))"}}],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Cocol/App","path":"Cocol/App.html","kind":"class","full_name":"Cocol::App","name":"App","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Cocol","kind":"module","full_name":"Cocol","name":"Cocol"},"doc":null,"summary":null,"class_methods":[{"id":"block_mining_loop-class-method","html_id":"block_mining_loop-class-method","name":"block_mining_loop","doc":"if mining","summary":"<p>if mining</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol.cr#L18","def":{"name":"block_mining_loop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"args = CLI::Argument.parse(ARGV)\nif args.miner?\n  threshold = 2\n  loop do\n    sleep(1)\n    pending_transactions_count = (pending_transactions = Ledger::Mempool.pending.values).size\n    if pending_transactions_count >= threshold\n      Cocol.logger.info(\"[Node: #{Node.settings.port}] Mining triggered\")\n      mining_transactions = pending_transactions\n      Ledger::Mempool.remove(mining_transactions)\n      Ledger::Pow.mine(mining_transactions)\n    end\n  end\nend\n"}},{"id":"start-class-method","html_id":"start-class-method","name":"start","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol.cr#L66","def":{"name":"start","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"args = CLI::Argument.parse(ARGV)\ncocol = Cocol::App.new\nNode.settings.port = args.port.to_i32\nNode.settings.max_connections = args.max_connections.to_i32\nNode.settings.miner = args.miner?\nNode.settings.master = args.master?\nspawn(Node.start)\nspawn(block_mining_loop)\nspawn do\n  cocol.run_api(port: args.port.to_i32)\nend\nloop do\n  sleep(0.01)\nend\n"}}],"constructors":[],"instance_methods":[{"id":"run_api(port:Int32)-instance-method","html_id":"run_api(port:Int32)-instance-method","name":"run_api","doc":null,"summary":null,"abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"}],"args_string":"(port : Int32)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol.cr#L4","def":{"name":"run_api","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"before_all do |env|\n  env.response.content_type = \"application/json\"\n  env.response.headers[\"Allow\"] = \"HEAD,GET,PUT,POST,DELETE,OPTIONS\"\n  env.response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n  env.response.headers[\"Access-Control-Allow-Headers\"] = \"X-Requested-With, X-HTTP-Method-Override, Content-Type, Cache-Control, Accept\"\nend\nlogging(false)\nKemal.run(port: port, args: nil)\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/cocol-project/cocol/Event","path":"Event.html","kind":"module","full_name":"Event","name":"Event","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/event/repo.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event/repo.cr"},{"filename":"cocol/node/event.cr","line_number":10,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Event","kind":"module","full_name":"Event","name":"Event"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"add_socket(socket:HTTP::WebSocket)-instance-method","html_id":"add_socket(socket:HTTP::WebSocket)-instance-method","name":"add_socket","doc":null,"summary":null,"abstract":false,"args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(socket : HTTP::WebSocket)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr#L19","def":{"name":"add_socket","args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Event::Repo.websockets << socket"}},{"id":"block(block:Ledger::Model::Block::Pow|Ledger::Model::Block::Pos):NewBlockEvent-instance-method","html_id":"block(block:Ledger::Model::Block::Pow|Ledger::Model::Block::Pos):NewBlockEvent-instance-method","name":"block","doc":null,"summary":null,"abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Ledger::Model::Block::Pow | Ledger::Model::Block::Pos"}],"args_string":"(block : Ledger::Model::Block::Pow | Ledger::Model::Block::Pos) : NewBlockEvent","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr#L67","def":{"name":"block","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Ledger::Model::Block::Pow | Ledger::Model::Block::Pos"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"NewBlockEvent","visibility":"Public","body":"{event: \"onNewBlock\", hash: block.hash, previous_hash: block.previous_hash, height: block.height}"}},{"id":"broadcast(payload:String)-instance-method","html_id":"broadcast(payload:String)-instance-method","name":"broadcast","doc":null,"summary":null,"abstract":false,"args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"String"}],"args_string":"(payload : String)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr#L27","def":{"name":"broadcast","args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Event::Repo.websockets.each do |socket|\n  socket.send(payload)\nend"}},{"id":"del_socket(socket:HTTP::WebSocket)-instance-method","html_id":"del_socket(socket:HTTP::WebSocket)-instance-method","name":"del_socket","doc":null,"summary":null,"abstract":false,"args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(socket : HTTP::WebSocket)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr#L23","def":{"name":"del_socket","args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Event::Repo.websockets.delete(socket)"}},{"id":"peer(peer:Messenger::Struct::Peer):PeerConnectionEvent-instance-method","html_id":"peer(peer:Messenger::Struct::Peer):PeerConnectionEvent-instance-method","name":"peer","doc":null,"summary":null,"abstract":false,"args":[{"name":"peer","doc":null,"default_value":"","external_name":"peer","restriction":"Messenger::Struct::Peer"}],"args_string":"(peer : Messenger::Struct::Peer) : PeerConnectionEvent","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr#L59","def":{"name":"peer","args":[{"name":"peer","doc":null,"default_value":"","external_name":"peer","restriction":"Messenger::Struct::Peer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"PeerConnectionEvent","visibility":"Public","body":"{event: \"onConnection\", node_port: Node.settings.port, peer_port: peer.handshake.port}"}},{"id":"transaction(event:EventType,transaction:Ledger::Model::Transaction):TransactionEvent-instance-method","html_id":"transaction(event:EventType,transaction:Ledger::Model::Transaction):TransactionEvent-instance-method","name":"transaction","doc":null,"summary":null,"abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"EventType"},{"name":"transaction","doc":null,"default_value":"","external_name":"transaction","restriction":"Ledger::Model::Transaction"}],"args_string":"(event : EventType, transaction : Ledger::Model::Transaction) : TransactionEvent","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr#L50","def":{"name":"transaction","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"EventType"},{"name":"transaction","doc":null,"default_value":"","external_name":"transaction","restriction":"Ledger::Model::Transaction"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TransactionEvent","visibility":"Public","body":"{event: event, hash: transaction.hash, amount: transaction.amount}"}},{"id":"update(event:String):NamedTuple-instance-method","html_id":"update(event:String):NamedTuple-instance-method","name":"update","doc":null,"summary":null,"abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"}],"args_string":"(event : String) : NamedTuple","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr#L33","def":{"name":"update","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"NamedTuple","visibility":"Public","body":"update = {event: event, peers: Messenger::Repo.peers.map do |peer|\n  peer.handshake.port\nend, port: Node.settings.port, miner: Node.settings.miner}\nlatest_block = Ledger::Repo.blocks[Ledger::Helper.probfin_previous_hash]\nupdate = update.merge({height: latest_block.height, hash: latest_block.hash})\nupdate\n"}}],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Event/EventType","path":"Event/EventType.html","kind":"alias","full_name":"Event::EventType","name":"EventType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/event.cr","line_number":14,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Event","kind":"module","full_name":"Event","name":"Event"},"doc":"should be Enum","summary":"<p>should be Enum</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Event/NewBlockEvent","path":"Event/NewBlockEvent.html","kind":"alias","full_name":"Event::NewBlockEvent","name":"NewBlockEvent","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/event.cr","line_number":17,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Event","kind":"module","full_name":"Event","name":"Event"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Event/PeerConnectionEvent","path":"Event/PeerConnectionEvent.html","kind":"alias","full_name":"Event::PeerConnectionEvent","name":"PeerConnectionEvent","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/event.cr","line_number":16,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Event","kind":"module","full_name":"Event","name":"Event"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Event/Repo","path":"Event/Repo.html","kind":"module","full_name":"Event::Repo","name":"Repo","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/event/repo.cr","line_number":4,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event/repo.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Event/Repo","kind":"module","full_name":"Event::Repo","name":"Repo"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Event","kind":"module","full_name":"Event","name":"Event"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"websockets-instance-method","html_id":"websockets-instance-method","name":"websockets","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event/repo.cr#L7","def":{"name":"websockets","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@websockets || (@@websockets = Array(HTTP::WebSocket).new)"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Event/TransactionEvent","path":"Event/TransactionEvent.html","kind":"alias","full_name":"Event::TransactionEvent","name":"TransactionEvent","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/event.cr","line_number":15,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/event.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Event","kind":"module","full_name":"Event","name":"Event"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/cocol-project/cocol/Ledger","path":"Ledger.html","kind":"module","full_name":"Ledger","name":"Ledger","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/model/transaction.cr","line_number":4,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr"},{"filename":"cocol/node/ledger/repo.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr"},{"filename":"cocol/node/ledger/mempool.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/mempool.cr"},{"filename":"cocol/node/ledger.cr","line_number":17,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Ledger/Helper","path":"Ledger/Helper.html","kind":"module","full_name":"Ledger::Helper","name":"Helper","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger.cr","line_number":18,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Ledger/Helper","kind":"module","full_name":"Ledger::Helper","name":"Helper"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger","kind":"module","full_name":"Ledger","name":"Ledger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"probfin_previous_hash:String-instance-method","html_id":"probfin_previous_hash:String-instance-method","name":"probfin_previous_hash","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr#L21","def":{"name":"probfin_previous_hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"current = ProbFin::Chain.dag[Ledger::Repo.ledger.last]\nDAG.tip_of_longest_branch(from: current).vertex.name\n"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Mempool","path":"Ledger/Mempool.html","kind":"module","full_name":"Ledger::Mempool","name":"Mempool","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"}],"locations":[{"filename":"cocol/node/ledger/mempool.cr","line_number":4,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/mempool.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"}],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Ledger/Mempool","kind":"module","full_name":"Ledger::Mempool","name":"Mempool"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger","kind":"module","full_name":"Ledger","name":"Ledger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"add(txn:Transaction):Bool-instance-method","html_id":"add(txn:Transaction):Bool-instance-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"txn","doc":null,"default_value":"","external_name":"txn","restriction":"Transaction"}],"args_string":"(txn : Transaction) : Bool","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/mempool.cr#L30","def":{"name":"add","args":[{"name":"txn","doc":null,"default_value":"","external_name":"txn","restriction":"Transaction"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if pending[txn.hash]?\n  return false\nend\npending[txn.hash] = txn\ntrue\n"}},{"id":"pending:Hash(TxnHash,Transaction)-instance-method","html_id":"pending:Hash(TxnHash,Transaction)-instance-method","name":"pending","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(TxnHash, Transaction)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/mempool.cr#L11","def":{"name":"pending","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(TxnHash, Transaction)","visibility":"Public","body":"@@pending || (@@pending = Hash(TxnHash, Transaction).new)"}},{"id":"remove(arg):Bool-instance-method","html_id":"remove(arg):Bool-instance-method","name":"remove","doc":null,"summary":null,"abstract":false,"args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""}],"args_string":"(arg) : Bool","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/mempool.cr#L15","def":{"name":"remove","args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"case arg\nwhen TxnHash\n  if !pending[arg]?\n    return false\n  end\n  pending.delete(arg)\n  true\nwhen Array\n  arg.each do |txn|\n    self.remove(txn.hash)\n  end\n  true\nelse\n  false\nend"}}],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Ledger/Mempool/TxnHash","path":"Ledger/Mempool/TxnHash.html","kind":"alias","full_name":"Ledger::Mempool::TxnHash","name":"TxnHash","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/mempool.cr","line_number":9,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/mempool.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Mempool","kind":"module","full_name":"Ledger::Mempool","name":"Mempool"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model","path":"Ledger/Model.html","kind":"module","full_name":"Ledger::Model","name":"Model","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/model/transaction.cr","line_number":4,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr"},{"filename":"cocol/node/ledger/model/block.cr","line_number":9,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/cocol-project/cocol/Ledger/Mempool","kind":"module","full_name":"Ledger::Mempool","name":"Mempool"},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Base","kind":"class","full_name":"Ledger::Model::Block::Base","name":"Base"},{"html_id":"github.com/cocol-project/cocol/Ledger/Repo","kind":"module","full_name":"Ledger::Repo","name":"Repo"}],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger","kind":"module","full_name":"Ledger","name":"Ledger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/AbstractTransaction","path":"Ledger/Model/AbstractTransaction.html","kind":"struct","full_name":"Ledger::Model::AbstractTransaction","name":"AbstractTransaction","abstract":true,"superclass":{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/cocol-project/cocol/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/ledger/model/transaction.cr","line_number":8,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Stake","kind":"struct","full_name":"Ledger::Model::Stake","name":"Stake"},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Transaction","kind":"struct","full_name":"Ledger::Model::Transaction","name":"Transaction"}],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L9","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"calc_hash:TxnHash-instance-method","html_id":"calc_hash:TxnHash-instance-method","name":"calc_hash","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : TxnHash","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L13","def":{"name":"calc_hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TxnHash","visibility":"Public","body":"sha = OpenSSL::Digest.new(\"SHA256\")\nsha.update(create_seed)\nsha.hexdigest\n"}},{"id":"create_seed:TxnHashSeed-instance-method","html_id":"create_seed:TxnHashSeed-instance-method","name":"create_seed","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : TxnHashSeed","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L11","def":{"name":"create_seed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TxnHashSeed","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block","path":"Ledger/Model/Block.html","kind":"module","full_name":"Ledger::Model::Block","name":"Block","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/model/block.cr","line_number":10,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Base","path":"Ledger/Model/Block/Base.html","kind":"class","full_name":"Ledger::Model::Block::Base","name":"Base","abstract":true,"superclass":{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/ledger/model/block.cr","line_number":14,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Pos","kind":"class","full_name":"Ledger::Model::Block::Pos","name":"Pos"},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Pow","kind":"class","full_name":"Ledger::Model::Block::Pow","name":"Pow"}],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block","kind":"module","full_name":"Ledger::Model::Block","name":"Block"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L15","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"hash:String-instance-method","html_id":"hash:String-instance-method","name":"hash","doc":"Generates an `UInt64` hash value for this object.\n\nThis method must have the property that `a == b` implies `a.hash == b.hash`.\n\nThe hash value is used along with `==` by the `Hash` class to determine if two objects\nreference the same hash key.\n\nSubclasses must not override this method. Instead, they must define `hash(hasher)`,\nthough usually the macro `def_hash` can be used to generate this method.","summary":"<p>Generates an <code>UInt64</code> hash value for this object.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L18","def":{"name":"hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@hash"}},{"id":"height:UInt64-instance-method","html_id":"height:UInt64-instance-method","name":"height","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L20","def":{"name":"height","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@height"}},{"id":"previous_hash:String-instance-method","html_id":"previous_hash:String-instance-method","name":"previous_hash","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L21","def":{"name":"previous_hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@previous_hash"}},{"id":"timestamp:Int64-instance-method","html_id":"timestamp:Int64-instance-method","name":"timestamp","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L19","def":{"name":"timestamp","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@timestamp"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/BlockHash","path":"Ledger/Model/Block/BlockHash.html","kind":"alias","full_name":"Ledger::Model::Block::BlockHash","name":"BlockHash","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/model/block.cr","line_number":11,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block","kind":"module","full_name":"Ledger::Model::Block","name":"Block"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/BlockHashSeed","path":"Ledger/Model/Block/BlockHashSeed.html","kind":"alias","full_name":"Ledger::Model::Block::BlockHashSeed","name":"BlockHashSeed","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/model/block.cr","line_number":12,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block","kind":"module","full_name":"Ledger::Model::Block","name":"Block"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Pos","path":"Ledger/Model/Block/Pos.html","kind":"class","full_name":"Ledger::Model::Block::Pos","name":"Pos","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Base","kind":"class","full_name":"Ledger::Model::Block::Base","name":"Base"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Base","kind":"class","full_name":"Ledger::Model::Block::Base","name":"Base"},{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/ledger/model/block.cr","line_number":28,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block","kind":"module","full_name":"Ledger::Model::Block","name":"Block"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(height,transactions,stakes,previous_hash)-class-method","html_id":"new(height,transactions,stakes,previous_hash)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":""},{"name":"stakes","doc":null,"default_value":"","external_name":"stakes","restriction":""},{"name":"previous_hash","doc":null,"default_value":"","external_name":"previous_hash","restriction":""}],"args_string":"(height, transactions, stakes, previous_hash)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L32","def":{"name":"new","args":[{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":""},{"name":"stakes","doc":null,"default_value":"","external_name":"stakes","restriction":""},{"name":"previous_hash","doc":null,"default_value":"","external_name":"previous_hash","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(height, transactions, stakes, previous_hash)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L28","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"stakes:Array(Stake)-instance-method","html_id":"stakes:Array(Stake)-instance-method","name":"stakes","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Stake)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L30","def":{"name":"stakes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Stake)","visibility":"Public","body":"@stakes"}},{"id":"stakes=(stakes:Array(Stake))-instance-method","html_id":"stakes=(stakes:Array(Stake))-instance-method","name":"stakes=","doc":null,"summary":null,"abstract":false,"args":[{"name":"stakes","doc":null,"default_value":"","external_name":"stakes","restriction":"Array(Stake)"}],"args_string":"(stakes : Array(Stake))","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L30","def":{"name":"stakes=","args":[{"name":"stakes","doc":null,"default_value":"","external_name":"stakes","restriction":"Array(Stake)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stakes = stakes"}},{"id":"transactions:Array(Transaction)-instance-method","html_id":"transactions:Array(Transaction)-instance-method","name":"transactions","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Transaction)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L29","def":{"name":"transactions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Transaction)","visibility":"Public","body":"@transactions"}},{"id":"transactions=(transactions:Array(Transaction))-instance-method","html_id":"transactions=(transactions:Array(Transaction))-instance-method","name":"transactions=","doc":null,"summary":null,"abstract":false,"args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Transaction)"}],"args_string":"(transactions : Array(Transaction))","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L29","def":{"name":"transactions=","args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Transaction)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@transactions = transactions"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Pow","path":"Ledger/Model/Block/Pow.html","kind":"class","full_name":"Ledger::Model::Block::Pow","name":"Pow","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Base","kind":"class","full_name":"Ledger::Model::Block::Base","name":"Base"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block/Base","kind":"class","full_name":"Ledger::Model::Block::Base","name":"Base"},{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/ledger/model/block.cr","line_number":52,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MIN_NBITS","name":"MIN_NBITS","value":"\"20000010\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Block","kind":"module","full_name":"Ledger::Model::Block","name":"Block"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(hash,timestamp,height,nonce,nbits,previous_hash,transactions)-class-method","html_id":"new(hash,timestamp,height,nonce,nbits,previous_hash,transactions)-class-method","name":"new","doc":"This is useful for testing and the genesis block.\nIt circumvents mining and should not be used otherwise","summary":"<p>This is useful for testing and the genesis block.</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":""},{"name":"timestamp","doc":null,"default_value":"","external_name":"timestamp","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"nonce","doc":null,"default_value":"","external_name":"nonce","restriction":""},{"name":"nbits","doc":null,"default_value":"","external_name":"nbits","restriction":""},{"name":"previous_hash","doc":null,"default_value":"","external_name":"previous_hash","restriction":""},{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":""}],"args_string":"(hash, timestamp, height, nonce, nbits, previous_hash, transactions)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L61","def":{"name":"new","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":""},{"name":"timestamp","doc":null,"default_value":"","external_name":"timestamp","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"nonce","doc":null,"default_value":"","external_name":"nonce","restriction":""},{"name":"nbits","doc":null,"default_value":"","external_name":"nbits","restriction":""},{"name":"previous_hash","doc":null,"default_value":"","external_name":"previous_hash","restriction":""},{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(hash, timestamp, height, nonce, nbits, previous_hash, transactions)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(height,transactions,previous_hash,nbits)-class-method","html_id":"new(height,transactions,previous_hash,nbits)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":""},{"name":"previous_hash","doc":null,"default_value":"","external_name":"previous_hash","restriction":""},{"name":"nbits","doc":null,"default_value":"","external_name":"nbits","restriction":""}],"args_string":"(height, transactions, previous_hash, nbits)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L70","def":{"name":"new","args":[{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":""},{"name":"previous_hash","doc":null,"default_value":"","external_name":"previous_hash","restriction":""},{"name":"nbits","doc":null,"default_value":"","external_name":"nbits","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(height, transactions, previous_hash, nbits)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L52","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"nbits:String-instance-method","html_id":"nbits:String-instance-method","name":"nbits","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L56","def":{"name":"nbits","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@nbits"}},{"id":"nonce:UInt64-instance-method","html_id":"nonce:UInt64-instance-method","name":"nonce","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L55","def":{"name":"nonce","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@nonce"}},{"id":"transactions:Array(Transaction)-instance-method","html_id":"transactions:Array(Transaction)-instance-method","name":"transactions","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Transaction)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L57","def":{"name":"transactions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Transaction)","visibility":"Public","body":"@transactions"}},{"id":"transactions=(transactions:Array(Transaction))-instance-method","html_id":"transactions=(transactions:Array(Transaction))-instance-method","name":"transactions=","doc":null,"summary":null,"abstract":false,"args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Transaction)"}],"args_string":"(transactions : Array(Transaction))","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/block.cr#L57","def":{"name":"transactions=","args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Transaction)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@transactions = transactions"}}],"macros":[],"types":[]}]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Stake","path":"Ledger/Model/Stake.html","kind":"struct","full_name":"Ledger::Model::Stake","name":"Stake","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/AbstractTransaction","kind":"struct","full_name":"Ledger::Model::AbstractTransaction","name":"AbstractTransaction"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/AbstractTransaction","kind":"struct","full_name":"Ledger::Model::AbstractTransaction","name":"AbstractTransaction"},{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/cocol-project/cocol/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/ledger/model/transaction.cr","line_number":37,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(staker,amount)-class-method","html_id":"new(staker,amount)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"staker","doc":null,"default_value":"","external_name":"staker","restriction":""},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":""}],"args_string":"(staker, amount)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L43","def":{"name":"new","args":[{"name":"staker","doc":null,"default_value":"","external_name":"staker","restriction":""},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(staker, amount)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L37","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"amount:Int64-instance-method","html_id":"amount:Int64-instance-method","name":"amount","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L39","def":{"name":"amount","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@amount"}},{"id":"create_seed:TxnHashSeed-instance-method","html_id":"create_seed:TxnHashSeed-instance-method","name":"create_seed","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : TxnHashSeed","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L48","def":{"name":"create_seed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TxnHashSeed","visibility":"Public","body":"\"#{@staker}#{@amount}#{@timestamp}\""}},{"id":"hash:TxnHash-instance-method","html_id":"hash:TxnHash-instance-method","name":"hash","doc":"Generates an `UInt64` hash value for this object.\n\nThis method must have the property that `a == b` implies `a.hash == b.hash`.\n\nThe hash value is used along with `==` by the `Hash` class to determine if two objects\nreference the same hash key.\n\nSubclasses must not override this method. Instead, they must define `hash(hasher)`,\nthough usually the macro `def_hash` can be used to generate this method.","summary":"<p>Generates an <code>UInt64</code> hash value for this object.</p>","abstract":false,"args":[],"args_string":" : TxnHash","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L40","def":{"name":"hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TxnHash","visibility":"Public","body":"@hash"}},{"id":"staker:String-instance-method","html_id":"staker:String-instance-method","name":"staker","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L38","def":{"name":"staker","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@staker"}},{"id":"timestamp:Int64-instance-method","html_id":"timestamp:Int64-instance-method","name":"timestamp","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L41","def":{"name":"timestamp","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@timestamp"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/Transaction","path":"Ledger/Model/Transaction.html","kind":"struct","full_name":"Ledger::Model::Transaction","name":"Transaction","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Ledger/Model/AbstractTransaction","kind":"struct","full_name":"Ledger::Model::AbstractTransaction","name":"AbstractTransaction"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model/AbstractTransaction","kind":"struct","full_name":"Ledger::Model::AbstractTransaction","name":"AbstractTransaction"},{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/cocol-project/cocol/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/ledger/model/transaction.cr","line_number":20,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(from,to,amount)-class-method","html_id":"new(from,to,amount)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":""},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":""}],"args_string":"(from, to, amount)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L27","def":{"name":"new","args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":""},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(from, to, amount)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L20","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"amount:Int64-instance-method","html_id":"amount:Int64-instance-method","name":"amount","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L23","def":{"name":"amount","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@amount"}},{"id":"create_seed:TxnHashSeed-instance-method","html_id":"create_seed:TxnHashSeed-instance-method","name":"create_seed","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : TxnHashSeed","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L32","def":{"name":"create_seed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TxnHashSeed","visibility":"Public","body":"\"#{@from}#{@to}#{@amount}#{@timestamp}\""}},{"id":"from:String-instance-method","html_id":"from:String-instance-method","name":"from","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L21","def":{"name":"from","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@from"}},{"id":"hash:TxnHash-instance-method","html_id":"hash:TxnHash-instance-method","name":"hash","doc":"Generates an `UInt64` hash value for this object.\n\nThis method must have the property that `a == b` implies `a.hash == b.hash`.\n\nThe hash value is used along with `==` by the `Hash` class to determine if two objects\nreference the same hash key.\n\nSubclasses must not override this method. Instead, they must define `hash(hasher)`,\nthough usually the macro `def_hash` can be used to generate this method.","summary":"<p>Generates an <code>UInt64</code> hash value for this object.</p>","abstract":false,"args":[],"args_string":" : TxnHash","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L24","def":{"name":"hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TxnHash","visibility":"Public","body":"@hash"}},{"id":"timestamp:Int64-instance-method","html_id":"timestamp:Int64-instance-method","name":"timestamp","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L25","def":{"name":"timestamp","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@timestamp"}},{"id":"to:String-instance-method","html_id":"to:String-instance-method","name":"to","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr#L22","def":{"name":"to","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@to"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/TxnHash","path":"Ledger/Model/TxnHash.html","kind":"alias","full_name":"Ledger::Model::TxnHash","name":"TxnHash","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/model/transaction.cr","line_number":5,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Model/TxnHashSeed","path":"Ledger/Model/TxnHashSeed.html","kind":"alias","full_name":"Ledger::Model::TxnHashSeed","name":"TxnHashSeed","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/model/transaction.cr","line_number":6,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/model/transaction.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/cocol-project/cocol/Ledger/Pos","path":"Ledger/Pos.html","kind":"module","full_name":"Ledger::Pos","name":"Pos","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger.cr","line_number":101,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Ledger/Pos","kind":"module","full_name":"Ledger::Pos","name":"Pos"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger","kind":"module","full_name":"Ledger","name":"Ledger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"genesis:Nil-instance-method","html_id":"genesis:Nil-instance-method","name":"genesis","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr#L104","def":{"name":"genesis","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Ledger::Repo.ledger.clear\nLedger::Repo.blocks.clear\nLedger::Repo.block_at_height.clear\ngenesis = Ledger::Model::Block::Pos.new(height: 0_u64, transactions: Array(Ledger::Model::Transaction).new, stakes: Array(Ledger::Model::Stake).new, previous_hash: \"Olivia\")\nLedger::Repo.blocks[genesis.hash] = genesis\nLedger::Repo.finalize(block: genesis.hash)\nProbFin.push(block: genesis.hash, parent: genesis.previous_hash)\n"}},{"id":"mine(transactions:Array(Ledger::Model::Transaction),stakes:Array(Ledger::Model::Stake)):Nil-instance-method","html_id":"mine(transactions:Array(Ledger::Model::Transaction),stakes:Array(Ledger::Model::Stake)):Nil-instance-method","name":"mine","doc":null,"summary":null,"abstract":false,"args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Ledger::Model::Transaction)"},{"name":"stakes","doc":null,"default_value":"","external_name":"stakes","restriction":"Array(Ledger::Model::Stake)"}],"args_string":"(transactions : Array(Ledger::Model::Transaction), stakes : Array(Ledger::Model::Stake)) : Nil","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr#L121","def":{"name":"mine","args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Ledger::Model::Transaction)"},{"name":"stakes","doc":null,"default_value":"","external_name":"stakes","restriction":"Array(Ledger::Model::Stake)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"previous_hash = Ledger::Helper.probfin_previous_hash\nheight = Ledger::Repo.blocks[previous_hash].height + 1\nnew_block = Ledger::Model::Block::Pos.new(height: height, transactions: transactions, stakes: stakes, previous_hash: previous_hash)\nif Ledger::Repo.save(block: new_block)\n  Cocol.logger.info(\"[Node: #{Node.settings.port}] Height: #{new_block.height} Mined: #{new_block.hash}\")\n  Ledger::Mempool.remove(transactions)\n  ProbFin.push(block: new_block.hash, parent: new_block.previous_hash)\n  spawn do\n    Messenger.broadcast(to: \"/blocks\", body: new_block.to_json)\n  end\n  spawn(Event.broadcast((Event.update(\"onInitialUpdate\")).to_json))\n  spawn(Event.broadcast((Event.block(new_block)).to_json))\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Pow","path":"Ledger/Pow.html","kind":"module","full_name":"Ledger::Pow","name":"Pow","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger.cr","line_number":27,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"RETARGET_TIMESPAN","name":"RETARGET_TIMESPAN","value":"60_f64","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Ledger/Pow","kind":"module","full_name":"Ledger::Pow","name":"Pow"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger","kind":"module","full_name":"Ledger","name":"Ledger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"genesis:Nil-instance-method","html_id":"genesis:Nil-instance-method","name":"genesis","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr#L32","def":{"name":"genesis","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Ledger::Repo.ledger.clear\nLedger::Repo.blocks.clear\nLedger::Repo.block_at_height.clear\ngenesis = Ledger::Model::Block::Pow.new(hash: \"00000f33293fc3092f436fec6480ba8460589087f2118c1c2d4a60f35372f297\", timestamp: 1449966000_i64, height: 0_u64, nonce: 2174333_u64, nbits: Ledger::Model::Block::Pow::MIN_NBITS, previous_hash: \"Olivia\", transactions: Array(Ledger::Model::Transaction).new)\nLedger::Repo.blocks[genesis.hash] = genesis\nLedger::Repo.finalize(block: genesis.hash)\nProbFin.push(block: genesis.hash, parent: genesis.previous_hash)\n"}},{"id":"mine(transactions:Array(Ledger::Model::Transaction)):Ledger::Model::Block::Pow-instance-method","html_id":"mine(transactions:Array(Ledger::Model::Transaction)):Ledger::Model::Block::Pow-instance-method","name":"mine","doc":null,"summary":null,"abstract":false,"args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Ledger::Model::Transaction)"}],"args_string":"(transactions : Array(Ledger::Model::Transaction)) : Ledger::Model::Block::Pow","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger.cr#L52","def":{"name":"mine","args":[{"name":"transactions","doc":null,"default_value":"","external_name":"transactions","restriction":"Array(Ledger::Model::Transaction)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Ledger::Model::Block::Pow","visibility":"Public","body":"previous_hash = Ledger::Helper.probfin_previous_hash\nheight = Ledger::Repo.blocks[previous_hash].height + 1\nif (height % 20) == 0\n  Cocol.logger.info(\"Retargeting Now\")\n  difficulty = BTCPoW::Utils.retarget(**timespan_from_height(height: height), wanted_timespan: RETARGET_TIMESPAN, current_target: BTCPoW::Utils.calculate_target(from: (Ledger::Repo.blocks[previous_hash].as(Model::Block::Pow)).nbits))\nelse\n  difficulty = (Ledger::Repo.blocks[previous_hash].as(Model::Block::Pow)).nbits\nend\nnew_block = Ledger::Model::Block::Pow.new(height: height, transactions: transactions, previous_hash: previous_hash, nbits: difficulty)\nif Ledger::Repo.save(block: new_block)\n  Cocol.logger.info(\"[Node: #{Node.settings.port}] Height: #{new_block.height} NBits: #{new_block.nbits} Mined: #{new_block.hash}\")\n  Ledger::Mempool.remove(transactions)\n  ProbFin.push(block: new_block.hash, parent: new_block.previous_hash)\n  spawn do\n    Messenger.broadcast(to: \"/blocks\", body: new_block.to_json)\n  end\n  spawn(Event.broadcast((Event.update(\"onInitialUpdate\")).to_json))\n  spawn(Event.broadcast((Event.block(new_block)).to_json))\nend\nnew_block\n"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Repo","path":"Ledger/Repo.html","kind":"module","full_name":"Ledger::Repo","name":"Repo","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"}],"locations":[{"filename":"cocol/node/ledger/repo.cr","line_number":4,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/cocol-project/cocol/Ledger/Model","kind":"module","full_name":"Ledger::Model","name":"Model"}],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Ledger/Repo","kind":"module","full_name":"Ledger::Repo","name":"Repo"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger","kind":"module","full_name":"Ledger","name":"Ledger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"block_at_height-instance-method","html_id":"block_at_height-instance-method","name":"block_at_height","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr#L20","def":{"name":"block_at_height","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@block_at_height || (@@block_at_height = Hash(UInt64, BlockHash).new)"}},{"id":"blocks-instance-method","html_id":"blocks-instance-method","name":"blocks","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr#L12","def":{"name":"blocks","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@blocks || (@@blocks = Hash(BlockHash, Block).new)"}},{"id":"finalize(blockhash:BlockHash):Bool-instance-method","html_id":"finalize(blockhash:BlockHash):Bool-instance-method","name":"finalize","doc":null,"summary":null,"abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"block","restriction":"BlockHash"}],"args_string":"(block hash : BlockHash) : Bool","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr#L38","def":{"name":"finalize","args":[{"name":"hash","doc":null,"default_value":"","external_name":"block","restriction":"BlockHash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"finalized_block = self.blocks[hash]\nif self.block_at_height[finalized_block.height]?\n  return false\nend\nself.ledger << hash\nself.block_at_height[finalized_block.height] = hash\ntrue\n"}},{"id":"ledger-instance-method","html_id":"ledger-instance-method","name":"ledger","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr#L16","def":{"name":"ledger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@ledger || (@@ledger = Array(BlockHash).new)"}},{"id":"ledger_last:Block-instance-method","html_id":"ledger_last:Block-instance-method","name":"ledger_last","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Block","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr#L26","def":{"name":"ledger_last","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Block","visibility":"Public","body":"blocks[ledger.last]"}},{"id":"save(block:Block):Bool-instance-method","html_id":"save(block:Block):Bool-instance-method","name":"save","doc":null,"summary":null,"abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : Bool","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr#L30","def":{"name":"save","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Block"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if self.blocks[block.hash]?\n  return false\nend\nself.blocks[block.hash] = block\ntrue\n"}}],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Ledger/Repo/Block","path":"Ledger/Repo/Block.html","kind":"alias","full_name":"Ledger::Repo::Block","name":"Block","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/repo.cr","line_number":10,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"Ledger::Model::Block::Base+","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Repo","kind":"module","full_name":"Ledger::Repo","name":"Repo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Ledger/Repo/BlockHash","path":"Ledger/Repo/BlockHash.html","kind":"alias","full_name":"Ledger::Repo::BlockHash","name":"BlockHash","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/ledger/repo.cr","line_number":9,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/ledger/repo.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Ledger/Repo","kind":"module","full_name":"Ledger::Repo","name":"Repo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/cocol-project/cocol/Messenger","path":"Messenger.html","kind":"module","full_name":"Messenger","name":"Messenger","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/messenger/struct/handshake.cr","line_number":5,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr"},{"filename":"cocol/node/messenger/repo.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/repo.cr"},{"filename":"cocol/node/messenger.cr","line_number":15,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Messenger","kind":"module","full_name":"Messenger","name":"Messenger"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"broadcast(toendpoint:String,body:String):Void-instance-method","html_id":"broadcast(toendpoint:String,body:String):Void-instance-method","name":"broadcast","doc":null,"summary":null,"abstract":false,"args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(to endpoint : String, body : String) : Void","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger.cr#L65","def":{"name":"broadcast","args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Void","visibility":"Public","body":"Messenger::Repo.peers.each do |peer|\n  client = HTTP::Client.new(peer.ip_addr, peer.handshake.port)\n  begin\n    client.post(endpoint, headers: HTTP::Headers {\"Content-Type\" => \"application/json\", \"X-Node-Id\" => Node.settings.port.to_s}, body: body)\n  rescue\n    Cocol.logger.warn(\"Peer #{peer.handshake.port} is not responding\")\n  end\n  client.close\nend"}},{"id":"connections_free:Int32-instance-method","html_id":"connections_free:Int32-instance-method","name":"connections_free","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger.cr#L84","def":{"name":"connections_free","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"free = Node.settings.max_connections - Messenger::Repo.peers.size\nif free < 0\n  return 0\nend\nfree\n"}},{"id":"establish_network_position-instance-method","html_id":"establish_network_position-instance-method","name":"establish_network_position","doc":"This is more of an e2e test","summary":"<p>This is more of an e2e test</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger.cr#L30","def":{"name":"establish_network_position","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"master = {\"host\" => \"localhost\", \"port\" => 3000}\nmaster = HTTP::Client.new(master[\"host\"].as(String), master[\"port\"].as(Int32))\nMessenger.handshake(with: master)\nresponse = master.get(\"/peers\")\npeers = Array(Messenger::Struct::Peer).from_json(response.body)\npeers = peers.reject! do |p|\n  p.handshake.port == Node.settings.port\nend\nMessenger::Repo.known_peers.concat(peers)\n(peers.sample(Messenger.connections_free)).each do |peer|\n  sleep(2)\n  idents = Messenger::Repo.peers.map do |_peer|\n    _peer.handshake.ident\n  end\n  if (idents.includes?(peer.handshake.ident)) || (Node.settings.ident == peer.handshake.ident)\n  else\n    client = HTTP::Client.new(peer.ip_addr, peer.handshake.port)\n    response = Messenger.handshake(with: client)\n    case response.status_code\n    when 200\n      Messenger::Repo.peers << peer\n    end\n    client.close\n  end\nend\nmaster.close\n"}},{"id":"handshake(withclient:HTTP::Client):HTTP::Client::Response-instance-method","html_id":"handshake(withclient:HTTP::Client):HTTP::Client::Response-instance-method","name":"handshake","doc":null,"summary":null,"abstract":false,"args":[{"name":"client","doc":null,"default_value":"","external_name":"with","restriction":"HTTP::Client"}],"args_string":"(with client : HTTP::Client) : HTTP::Client::Response","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger.cr#L18","def":{"name":"handshake","args":[{"name":"client","doc":null,"default_value":"","external_name":"with","restriction":"HTTP::Client"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"client.post(\"/peers\", headers: HTTP::Headers {\"Content-Type\" => \"application/json\"}, body: Messenger::Struct::Handshake.new(ident: Node.settings.ident, port: Node.settings.port).to_json)"}}],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Messenger/Repo","path":"Messenger/Repo.html","kind":"module","full_name":"Messenger::Repo","name":"Repo","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/messenger/repo.cr","line_number":4,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/repo.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Messenger/Repo","kind":"module","full_name":"Messenger::Repo","name":"Repo"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Messenger","kind":"module","full_name":"Messenger","name":"Messenger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"known_peers-instance-method","html_id":"known_peers-instance-method","name":"known_peers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/repo.cr#L11","def":{"name":"known_peers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@known_peers || (@@known_peers = Set(Messenger::Struct::Peer).new)"}},{"id":"peers-instance-method","html_id":"peers-instance-method","name":"peers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/repo.cr#L7","def":{"name":"peers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@peers || (@@peers = Set(Messenger::Struct::Peer).new)"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Messenger/Struct","path":"Messenger/Struct.html","kind":"module","full_name":"Messenger::Struct","name":"Struct","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/messenger/struct/handshake.cr","line_number":5,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr"},{"filename":"cocol/node/messenger/struct/peer.cr","line_number":8,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Messenger","kind":"module","full_name":"Messenger","name":"Messenger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Messenger/Struct/Handshake","path":"Messenger/Struct/Handshake.html","kind":"struct","full_name":"Messenger::Struct::Handshake","name":"Handshake","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/cocol-project/cocol/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/messenger/struct/handshake.cr","line_number":6,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Messenger/Struct","kind":"module","full_name":"Messenger::Struct","name":"Struct"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(ident,port)-class-method","html_id":"new(ident,port)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"ident","doc":null,"default_value":"","external_name":"ident","restriction":""},{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"args_string":"(ident, port)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr#L12","def":{"name":"new","args":[{"name":"ident","doc":null,"default_value":"","external_name":"ident","restriction":""},{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(ident, port)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr#L7","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"id":"ident:UUID-instance-method","html_id":"ident:UUID-instance-method","name":"ident","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UUID","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr#L9","def":{"name":"ident","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UUID","visibility":"Public","body":"@ident"}},{"id":"ident=(ident:UUID)-instance-method","html_id":"ident=(ident:UUID)-instance-method","name":"ident=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ident","doc":null,"default_value":"","external_name":"ident","restriction":"UUID"}],"args_string":"(ident : UUID)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr#L9","def":{"name":"ident=","args":[{"name":"ident","doc":null,"default_value":"","external_name":"ident","restriction":"UUID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ident = ident"}},{"id":"port:Int32-instance-method","html_id":"port:Int32-instance-method","name":"port","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr#L10","def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@port"}},{"id":"port=(port:Int32)-instance-method","html_id":"port=(port:Int32)-instance-method","name":"port=","doc":null,"summary":null,"abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"}],"args_string":"(port : Int32)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/handshake.cr#L10","def":{"name":"port=","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@port = port"}}],"macros":[],"types":[]},{"html_id":"github.com/cocol-project/cocol/Messenger/Struct/Peer","path":"Messenger/Struct/Peer.html","kind":"struct","full_name":"Messenger::Struct::Peer","name":"Peer","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"github.com/cocol-project/cocol/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/cocol-project/cocol/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/messenger/struct/peer.cr","line_number":9,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/cocol-project/cocol/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Messenger/Struct","kind":"module","full_name":"Messenger::Struct","name":"Struct"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(pull:JSON::PullParser)-class-method","html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr#L10","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"id":"new(handshake,ip_addr=&quot;localhost&quot;)-class-method","html_id":"new(handshake,ip_addr=&amp;quot;localhost&amp;quot;)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"handshake","doc":null,"default_value":"","external_name":"handshake","restriction":""},{"name":"ip_addr","doc":null,"default_value":"\"localhost\"","external_name":"ip_addr","restriction":""}],"args_string":"(handshake, ip_addr = <span class=\"s\">&quot;localhost&quot;</span>)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr#L17","def":{"name":"new","args":[{"name":"handshake","doc":null,"default_value":"","external_name":"handshake","restriction":""},{"name":"ip_addr","doc":null,"default_value":"\"localhost\"","external_name":"ip_addr","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(handshake, ip_addr)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"handshake:Messenger::Struct::Handshake-instance-method","html_id":"handshake:Messenger::Struct::Handshake-instance-method","name":"handshake","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Messenger::Struct::Handshake","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr#L15","def":{"name":"handshake","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Messenger::Struct::Handshake","visibility":"Public","body":"@handshake"}},{"id":"handshake=(handshake:Messenger::Struct::Handshake)-instance-method","html_id":"handshake=(handshake:Messenger::Struct::Handshake)-instance-method","name":"handshake=","doc":null,"summary":null,"abstract":false,"args":[{"name":"handshake","doc":null,"default_value":"","external_name":"handshake","restriction":"Messenger::Struct::Handshake"}],"args_string":"(handshake : Messenger::Struct::Handshake)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr#L15","def":{"name":"handshake=","args":[{"name":"handshake","doc":null,"default_value":"","external_name":"handshake","restriction":"Messenger::Struct::Handshake"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@handshake = handshake"}},{"id":"ip_addr:String-instance-method","html_id":"ip_addr:String-instance-method","name":"ip_addr","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr#L13","def":{"name":"ip_addr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@ip_addr"}},{"id":"ip_addr=(ip_addr:String)-instance-method","html_id":"ip_addr=(ip_addr:String)-instance-method","name":"ip_addr=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ip_addr","doc":null,"default_value":"","external_name":"ip_addr","restriction":"String"}],"args_string":"(ip_addr : String)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/messenger/struct/peer.cr#L13","def":{"name":"ip_addr=","args":[{"name":"ip_addr","doc":null,"default_value":"","external_name":"ip_addr","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ip_addr = ip_addr"}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/cocol-project/cocol/Node","path":"Node.html","kind":"module","full_name":"Node","name":"Node","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cocol/node/settings.cr","line_number":3,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr"},{"filename":"cocol/node.cr","line_number":1,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/cocol-project/cocol/Node","kind":"module","full_name":"Node","name":"Node"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L13","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@settings || (@@settings = Settings.new)"}}],"constructors":[],"instance_methods":[{"id":"start-instance-method","html_id":"start-instance-method","name":"start","doc":"should be e2e tested","summary":"<p>should be e2e tested</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node.cr#L5","def":{"name":"start","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ledger::Pow.genesis\nif !Node.settings.master\n  Messenger.establish_network_position\nend\n"}}],"macros":[],"types":[{"html_id":"github.com/cocol-project/cocol/Node/Settings","path":"Node/Settings.html","kind":"class","full_name":"Node::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/cocol-project/cocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/cocol-project/cocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cocol/node/settings.cr","line_number":4,"url":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr"}],"repository_name":"github.com/cocol-project/cocol","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/cocol-project/cocol/Node","kind":"module","full_name":"Node","name":"Node"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"ident:UUID-instance-method","html_id":"ident:UUID-instance-method","name":"ident","doc":"TODO: Use ..::Struct::Node","summary":"<p><span class=\"flag orange\">TODO</span>  Use ..::Struct::Node</p>","abstract":false,"args":[],"args_string":" : UUID","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L6","def":{"name":"ident","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UUID","visibility":"Public","body":"@ident"}},{"id":"ident=(ident:UUID)-instance-method","html_id":"ident=(ident:UUID)-instance-method","name":"ident=","doc":"TODO: Use ..::Struct::Node","summary":"<p><span class=\"flag orange\">TODO</span>  Use ..::Struct::Node</p>","abstract":false,"args":[{"name":"ident","doc":null,"default_value":"","external_name":"ident","restriction":"UUID"}],"args_string":"(ident : UUID)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L6","def":{"name":"ident=","args":[{"name":"ident","doc":null,"default_value":"","external_name":"ident","restriction":"UUID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ident = ident"}},{"id":"master:Bool-instance-method","html_id":"master:Bool-instance-method","name":"master","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L10","def":{"name":"master","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@master"}},{"id":"master=(master:Bool)-instance-method","html_id":"master=(master:Bool)-instance-method","name":"master=","doc":null,"summary":null,"abstract":false,"args":[{"name":"master","doc":null,"default_value":"","external_name":"master","restriction":"Bool"}],"args_string":"(master : Bool)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L10","def":{"name":"master=","args":[{"name":"master","doc":null,"default_value":"","external_name":"master","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@master = master"}},{"id":"max_connections:Int32-instance-method","html_id":"max_connections:Int32-instance-method","name":"max_connections","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L8","def":{"name":"max_connections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_connections"}},{"id":"max_connections=(max_connections:Int32)-instance-method","html_id":"max_connections=(max_connections:Int32)-instance-method","name":"max_connections=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_connections","doc":null,"default_value":"","external_name":"max_connections","restriction":"Int32"}],"args_string":"(max_connections : Int32)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L8","def":{"name":"max_connections=","args":[{"name":"max_connections","doc":null,"default_value":"","external_name":"max_connections","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_connections = max_connections"}},{"id":"miner:Bool-instance-method","html_id":"miner:Bool-instance-method","name":"miner","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L9","def":{"name":"miner","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@miner"}},{"id":"miner=(miner:Bool)-instance-method","html_id":"miner=(miner:Bool)-instance-method","name":"miner=","doc":null,"summary":null,"abstract":false,"args":[{"name":"miner","doc":null,"default_value":"","external_name":"miner","restriction":"Bool"}],"args_string":"(miner : Bool)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L9","def":{"name":"miner=","args":[{"name":"miner","doc":null,"default_value":"","external_name":"miner","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@miner = miner"}},{"id":"port:Int32-instance-method","html_id":"port:Int32-instance-method","name":"port","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L7","def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@port"}},{"id":"port=(port:Int32)-instance-method","html_id":"port=(port:Int32)-instance-method","name":"port=","doc":null,"summary":null,"abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"}],"args_string":"(port : Int32)","source_link":"https://github.com/cocol-project/cocol/blob/0532bfe30c4f942c59d2e61d8ba498b62fb891a8/src/cocol/node/settings.cr#L7","def":{"name":"port=","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@port = port"}}],"macros":[],"types":[]}]}]}}